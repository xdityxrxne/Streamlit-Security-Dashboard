import streamlit as st
import pandas as pd
import time
import plotly.express as px
import webbrowser 


st.set_page_config(
    page_title="Analytics Dashboard",
    page_icon="ðŸ“ˆ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def open_home_page():
    webbrowser.open("http://127.0.0.1:5000")
# Add a button to open a link to http://127.0.0.1:5000
if st.button("Home"):
    open_home_page()

# Main page heading
st.title("Analytics Dashboard")
st.sidebar.image("logo_2.png", use_column_width=True)

# Function to load and update CSV data
def load_csv_data(csv_file):
    try:
        df = pd.read_csv(csv_file)  # Load data from CSV file
        return df
    except FileNotFoundError:
        st.warning(f"File '{csv_file}' not found. Please make sure the file exists.")
        return None

# Function to generate and display the report
def generate_report(df):
    highest_count = df['Count'].max()
    lowest_count = df['Count'].min()
    highest_timestamp = df[df['Count'] == highest_count]['Timestamp'].values[0]
    lowest_timestamp = df[df['Count'] == lowest_count]['Timestamp'].values[0]
    
    # Create an expander for the report
    with st.expander("Report Generated by Vigilance AI"):
        # Add logo and heading to the report
        st.image("logo_2.png", use_column_width=True, caption="Vigilance AI Logo")
        st.subheader("Report:")
        
        # Report content
        report = f"<table style='width:100%'><tr><th style='text-align:left;'>Statistic</th><th style='text-align:left;'>Value</th></tr>"
        report += f"<tr><td>Highest Count</td><td>{highest_count}</td></tr>"
        report += f"<tr><td>Lowest Count</td><td>{lowest_count}</td></tr>"
        report += f"<tr><td>Timestamp of Highest Count</td><td>{highest_timestamp}</td></tr>"
        report += f"<tr><td>Timestamp of Lowest Count</td><td>{lowest_timestamp}</td></tr></table>"
        
        # Display the report content
        st.write(report, unsafe_allow_html=True)
        
        # Display the latest live line chart with square grid and labels
        st.subheader("Latest Line Graph:")
        
        # Create a Plotly figure for the live line chart
        fig = px.line(df, x='Timestamp', y='Count', labels={'Count': 'Count', 'Timestamp': 'Timestamp'})
        fig.update_xaxes(showgrid=True, title_text='Timestamp')
        fig.update_yaxes(showgrid=True, title_text='Count')
        
        # Display the Plotly figure
        st.plotly_chart(fig, use_container_width=True)

# Streamlit app
def main():
    st.title("Live Line Graph from CSV Data")
    
    # Sidebar
    csv_file = st.sidebar.text_input("Enter CSV File Path:", "count_data.csv")
    
    # Load initial data
    df = load_csv_data(csv_file)
    
    if df is not None:
        st.subheader("Live Line Graph")
        
        # Create a Plotly figure for the live line chart
        live_chart = st.empty()
        
        # Generate Report button
        if st.sidebar.button("Generate Report"):
            generate_report(df)
        
        while True:
            # Reload data every 5 seconds
            df = load_csv_data(csv_file)
            
            if df is not None:
                # Update the live line chart
                fig = px.line(df, x='Timestamp', y='Count', labels={'Count': 'Count', 'Timestamp': 'Timestamp'})
                fig.update_xaxes(showgrid=True, title_text='Timestamp')
                fig.update_yaxes(showgrid=True, title_text='Count')
                live_chart.plotly_chart(fig, use_container_width=True)
                
            time.sleep(5)

if __name__ == "__main__":
    main()
